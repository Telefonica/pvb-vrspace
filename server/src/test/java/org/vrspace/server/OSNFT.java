package org.vrspace.server;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

/**
 * <p>
 * Auto generated code.
 * <p>
 * <strong>Do not modify!</strong>
 * <p>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j
 * command line tools</a>, or the
 * org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen
 * module</a> to update.
 *
 * <p>
 * Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class OSNFT extends Contract {
  public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f4f534e46540000000000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f4f734e6674000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001a6565b508060019080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000256565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b600060028204905060018216806200026f57607f821691505b602082108114156200028657620002856200028c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613a8480620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636352211e116100b8578063a22cb4651161007c578063a22cb4651461034e578063b88d4fde1461036a578063c87b56dd14610386578063e985e9c5146103b6578063eacabe14146103e6578063f2fde38b1461041657610137565b80636352211e146102a857806370a08231146102d8578063715018a6146103085780638da5cb5b1461031257806395d89b411461033057610137565b806323b872dd116100ff57806323b872dd146101f45780632f745c591461021057806342842e0e1461024057806342966c681461025c5780634f6ccce71461027857610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806318160ddd146101d6575b600080fd5b6101566004803603810190610151919061287d565b610432565b6040516101639190612d32565b60405180910390f35b610174610444565b6040516101819190612d4d565b60405180910390f35b6101a4600480360381019061019f91906128cf565b6104d6565b6040516101b19190612ccb565b60405180910390f35b6101d460048036038101906101cf9190612841565b61055b565b005b6101de610673565b6040516101eb919061300f565b60405180910390f35b61020e600480360381019061020991906126e7565b610680565b005b61022a60048036038101906102259190612841565b6106e0565b604051610237919061300f565b60405180910390f35b61025a600480360381019061025591906126e7565b610785565b005b610276600480360381019061027191906128cf565b6107a5565b005b610292600480360381019061028d91906128cf565b610801565b60405161029f919061300f565b60405180910390f35b6102c260048036038101906102bd91906128cf565b610898565b6040516102cf9190612ccb565b60405180910390f35b6102f260048036038101906102ed9190612682565b61094a565b6040516102ff919061300f565b60405180910390f35b610310610a02565b005b61031a610a8a565b6040516103279190612ccb565b60405180910390f35b610338610ab4565b6040516103459190612d4d565b60405180910390f35b610368600480360381019061036391906127b1565b610b46565b005b610384600480360381019061037f9190612736565b610b5c565b005b6103a0600480360381019061039b91906128cf565b610bbe565b6040516103ad9190612d4d565b60405180910390f35b6103d060048036038101906103cb91906126ab565b610bd0565b6040516103dd9190612d32565b60405180910390f35b61040060048036038101906103fb91906127ed565b610c64565b60405161040d919061300f565b60405180910390f35b610430600480360381019061042b9190612682565b610c9c565b005b600061043d82610d94565b9050919050565b60606000805461045390613265565b80601f016020809104026020016040519081016040528092919081815260200182805461047f90613265565b80156104cc5780601f106104a1576101008083540402835291602001916104cc565b820191906000526020600020905b8154815290600101906020018083116104af57829003601f168201915b5050505050905090565b60006104e182610e0e565b610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790612f2f565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061056682610898565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90612f8f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105f6610e7a565b73ffffffffffffffffffffffffffffffffffffffff16148061062557506106248161061f610e7a565b610bd0565b5b610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90612e6f565b60405180910390fd5b61066e8383610e82565b505050565b6000600a80549050905090565b61069161068b610e7a565b82610f3b565b6106d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c790612faf565b60405180910390fd5b6106db838383611019565b505050565b60006106eb8361094a565b821061072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390612d6f565b60405180910390fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6107a083838360405180602001604052806000815250610b5c565b505050565b6107b66107b0610e7a565b82610f3b565b6107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90612fef565b60405180910390fd5b6107fe81611280565b50565b600061080b610673565b821061084c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084390612fcf565b60405180910390fd5b600a8281548110610886577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093890612eaf565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290612e8f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a0a610e7a565b73ffffffffffffffffffffffffffffffffffffffff16610a28610a8a565b73ffffffffffffffffffffffffffffffffffffffff1614610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7590612f4f565b60405180910390fd5b610a88600061128c565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ac390613265565b80601f0160208091040260200160405190810160405280929190818152602001828054610aef90613265565b8015610b3c5780601f10610b1157610100808354040283529160200191610b3c565b820191906000526020600020905b815481529060010190602001808311610b1f57829003601f168201915b5050505050905090565b610b58610b51610e7a565b8383611352565b5050565b610b6d610b67610e7a565b83610f3b565b610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390612faf565b60405180910390fd5b610bb8848484846114bf565b50505050565b6060610bc98261151b565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610c70600c61166d565b6000610c7c600c611683565b9050610c888482611691565b610c92818461186b565b8091505092915050565b610ca4610e7a565b73ffffffffffffffffffffffffffffffffffffffff16610cc2610a8a565b73ffffffffffffffffffffffffffffffffffffffff1614610d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0f90612f4f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612daf565b60405180910390fd5b610d918161128c565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610e075750610e06826118df565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610ef583610898565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610f4682610e0e565b610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90612e4f565b60405180910390fd5b6000610f9083610898565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fff57508373ffffffffffffffffffffffffffffffffffffffff16610fe7846104d6565b73ffffffffffffffffffffffffffffffffffffffff16145b80611010575061100f8185610bd0565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661103982610898565b73ffffffffffffffffffffffffffffffffffffffff161461108f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108690612dcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690612e0f565b60405180910390fd5b61110a8383836119c1565b611115600082610e82565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611165919061317b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111bc91906130f4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461127b8383836119d1565b505050565b611289816119d6565b50565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b890612e2f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114b29190612d32565b60405180910390a3505050565b6114ca848484611019565b6114d684848484611a29565b611515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150c90612d8f565b60405180910390fd5b50505050565b606061152682610e0e565b611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155c90612f0f565b60405180910390fd5b600060066000848152602001908152602001600020805461158590613265565b80601f01602080910402602001604051908101604052809291908181526020018280546115b190613265565b80156115fe5780601f106115d3576101008083540402835291602001916115fe565b820191906000526020600020905b8154815290600101906020018083116115e157829003601f168201915b50505050509050600061160f611bc0565b9050600081511415611625578192505050611668565b60008251111561165a578082604051602001611642929190612ca7565b60405160208183030381529060405292505050611668565b61166384611bd7565b925050505b919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f890612eef565b60405180910390fd5b61170a81610e0e565b1561174a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174190612def565b60405180910390fd5b611756600083836119c1565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117a691906130f4565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611867600083836119d1565b5050565b61187482610e0e565b6118b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118aa90612ecf565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906118da929190612466565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119aa57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119ba57506119b982611c7e565b5b9050919050565b6119cc838383611ce8565b505050565b505050565b6119df81611dfc565b60006006600083815260200190815260200160002080546119ff90613265565b905014611a2657600660008281526020019081526020016000206000611a2591906124ec565b5b50565b6000611a4a8473ffffffffffffffffffffffffffffffffffffffff16611f19565b15611bb3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a73610e7a565b8786866040518563ffffffff1660e01b8152600401611a959493929190612ce6565b602060405180830381600087803b158015611aaf57600080fd5b505af1925050508015611ae057506040513d601f19601f82011682018060405250810190611add91906128a6565b60015b611b63573d8060008114611b10576040519150601f19603f3d011682016040523d82523d6000602084013e611b15565b606091505b50600081511415611b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5290612d8f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611bb8565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060611be282610e0e565b611c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1890612f6f565b60405180910390fd5b6000611c2b611bc0565b90506000815111611c4b5760405180602001604052806000815250611c76565b80611c5584611f3c565b604051602001611c66929190612ca7565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611cf38383836120e9565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d3657611d31816120ee565b611d75565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611d7457611d738382612137565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611db857611db3816122a4565b611df7565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611df657611df582826123e7565b5b5b505050565b6000611e0782610898565b9050611e15816000846119c1565b611e20600083610e82565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e70919061317b565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f15816000846119d1565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611f84576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120e4565b600082905060005b60008214611fb6578080611f9f906132c8565b915050600a82611faf919061314a565b9150611f8c565b60008167ffffffffffffffff811115611ff8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561202a5781602001600182028036833780820191505090505b5090505b600085146120dd57600182612043919061317b565b9150600a856120529190613311565b603061205e91906130f4565b60f81b81838151811061209a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120d6919061314a565b945061202e565b8093505050505b919050565b505050565b600a80549050600b600083815260200190815260200160002081905550600a81908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016121448461094a565b61214e919061317b565b9050600060096000848152602001908152602001600020549050818114612233576000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816009600083815260200190815260200160002081905550505b6009600084815260200190815260200160002060009055600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600a805490506122b8919061317b565b90506000600b60008481526020019081526020016000205490506000600a838154811061230e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600a8381548110612356577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600b600083815260200190815260200160002081905550600b600085815260200190815260200160002060009055600a8054806123cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006123f28361094a565b905081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806009600084815260200190815260200160002081905550505050565b82805461247290613265565b90600052602060002090601f01602090048101928261249457600085556124db565b82601f106124ad57805160ff19168380011785556124db565b828001600101855582156124db579182015b828111156124da5782518255916020019190600101906124bf565b5b5090506124e8919061252c565b5090565b5080546124f890613265565b6000825580601f1061250a5750612529565b601f016020900490600052602060002090810190612528919061252c565b5b50565b5b8082111561254557600081600090555060010161252d565b5090565b600061255c6125578461304f565b61302a565b90508281526020810184848401111561257457600080fd5b61257f848285613223565b509392505050565b600061259a61259584613080565b61302a565b9050828152602081018484840111156125b257600080fd5b6125bd848285613223565b509392505050565b6000813590506125d4816139f2565b92915050565b6000813590506125e981613a09565b92915050565b6000813590506125fe81613a20565b92915050565b60008151905061261381613a20565b92915050565b600082601f83011261262a57600080fd5b813561263a848260208601612549565b91505092915050565b600082601f83011261265457600080fd5b8135612664848260208601612587565b91505092915050565b60008135905061267c81613a37565b92915050565b60006020828403121561269457600080fd5b60006126a2848285016125c5565b91505092915050565b600080604083850312156126be57600080fd5b60006126cc858286016125c5565b92505060206126dd858286016125c5565b9150509250929050565b6000806000606084860312156126fc57600080fd5b600061270a868287016125c5565b935050602061271b868287016125c5565b925050604061272c8682870161266d565b9150509250925092565b6000806000806080858703121561274c57600080fd5b600061275a878288016125c5565b945050602061276b878288016125c5565b935050604061277c8782880161266d565b925050606085013567ffffffffffffffff81111561279957600080fd5b6127a587828801612619565b91505092959194509250565b600080604083850312156127c457600080fd5b60006127d2858286016125c5565b92505060206127e3858286016125da565b9150509250929050565b6000806040838503121561280057600080fd5b600061280e858286016125c5565b925050602083013567ffffffffffffffff81111561282b57600080fd5b61283785828601612643565b9150509250929050565b6000806040838503121561285457600080fd5b6000612862858286016125c5565b92505060206128738582860161266d565b9150509250929050565b60006020828403121561288f57600080fd5b600061289d848285016125ef565b91505092915050565b6000602082840312156128b857600080fd5b60006128c684828501612604565b91505092915050565b6000602082840312156128e157600080fd5b60006128ef8482850161266d565b91505092915050565b612901816131af565b82525050565b612910816131c1565b82525050565b6000612921826130b1565b61292b81856130c7565b935061293b818560208601613232565b612944816133fe565b840191505092915050565b600061295a826130bc565b61296481856130d8565b9350612974818560208601613232565b61297d816133fe565b840191505092915050565b6000612993826130bc565b61299d81856130e9565b93506129ad818560208601613232565b80840191505092915050565b60006129c6602b836130d8565b91506129d18261340f565b604082019050919050565b60006129e96032836130d8565b91506129f48261345e565b604082019050919050565b6000612a0c6026836130d8565b9150612a17826134ad565b604082019050919050565b6000612a2f6025836130d8565b9150612a3a826134fc565b604082019050919050565b6000612a52601c836130d8565b9150612a5d8261354b565b602082019050919050565b6000612a756024836130d8565b9150612a8082613574565b604082019050919050565b6000612a986019836130d8565b9150612aa3826135c3565b602082019050919050565b6000612abb602c836130d8565b9150612ac6826135ec565b604082019050919050565b6000612ade6038836130d8565b9150612ae98261363b565b604082019050919050565b6000612b01602a836130d8565b9150612b0c8261368a565b604082019050919050565b6000612b246029836130d8565b9150612b2f826136d9565b604082019050919050565b6000612b47602e836130d8565b9150612b5282613728565b604082019050919050565b6000612b6a6020836130d8565b9150612b7582613777565b602082019050919050565b6000612b8d6031836130d8565b9150612b98826137a0565b604082019050919050565b6000612bb0602c836130d8565b9150612bbb826137ef565b604082019050919050565b6000612bd36020836130d8565b9150612bde8261383e565b602082019050919050565b6000612bf6602f836130d8565b9150612c0182613867565b604082019050919050565b6000612c196021836130d8565b9150612c24826138b6565b604082019050919050565b6000612c3c6031836130d8565b9150612c4782613905565b604082019050919050565b6000612c5f602c836130d8565b9150612c6a82613954565b604082019050919050565b6000612c826030836130d8565b9150612c8d826139a3565b604082019050919050565b612ca181613219565b82525050565b6000612cb38285612988565b9150612cbf8284612988565b91508190509392505050565b6000602082019050612ce060008301846128f8565b92915050565b6000608082019050612cfb60008301876128f8565b612d0860208301866128f8565b612d156040830185612c98565b8181036060830152612d278184612916565b905095945050505050565b6000602082019050612d476000830184612907565b92915050565b60006020820190508181036000830152612d67818461294f565b905092915050565b60006020820190508181036000830152612d88816129b9565b9050919050565b60006020820190508181036000830152612da8816129dc565b9050919050565b60006020820190508181036000830152612dc8816129ff565b9050919050565b60006020820190508181036000830152612de881612a22565b9050919050565b60006020820190508181036000830152612e0881612a45565b9050919050565b60006020820190508181036000830152612e2881612a68565b9050919050565b60006020820190508181036000830152612e4881612a8b565b9050919050565b60006020820190508181036000830152612e6881612aae565b9050919050565b60006020820190508181036000830152612e8881612ad1565b9050919050565b60006020820190508181036000830152612ea881612af4565b9050919050565b60006020820190508181036000830152612ec881612b17565b9050919050565b60006020820190508181036000830152612ee881612b3a565b9050919050565b60006020820190508181036000830152612f0881612b5d565b9050919050565b60006020820190508181036000830152612f2881612b80565b9050919050565b60006020820190508181036000830152612f4881612ba3565b9050919050565b60006020820190508181036000830152612f6881612bc6565b9050919050565b60006020820190508181036000830152612f8881612be9565b9050919050565b60006020820190508181036000830152612fa881612c0c565b9050919050565b60006020820190508181036000830152612fc881612c2f565b9050919050565b60006020820190508181036000830152612fe881612c52565b9050919050565b6000602082019050818103600083015261300881612c75565b9050919050565b60006020820190506130246000830184612c98565b92915050565b6000613034613045565b90506130408282613297565b919050565b6000604051905090565b600067ffffffffffffffff82111561306a576130696133cf565b5b613073826133fe565b9050602081019050919050565b600067ffffffffffffffff82111561309b5761309a6133cf565b5b6130a4826133fe565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006130ff82613219565b915061310a83613219565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561313f5761313e613342565b5b828201905092915050565b600061315582613219565b915061316083613219565b9250826131705761316f613371565b5b828204905092915050565b600061318682613219565b915061319183613219565b9250828210156131a4576131a3613342565b5b828203905092915050565b60006131ba826131f9565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613250578082015181840152602081019050613235565b8381111561325f576000848401525b50505050565b6000600282049050600182168061327d57607f821691505b60208210811415613291576132906133a0565b5b50919050565b6132a0826133fe565b810181811067ffffffffffffffff821117156132bf576132be6133cf565b5b80604052505050565b60006132d382613219565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561330657613305613342565b5b600182019050919050565b600061331c82613219565b915061332783613219565b92508261333757613336613371565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b6139fb816131af565b8114613a0657600080fd5b50565b613a12816131c1565b8114613a1d57600080fd5b50565b613a29816131cd565b8114613a3457600080fd5b50565b613a4081613219565b8114613a4b57600080fd5b5056fea26469706673582212206f71195fe6818d1b284c5158f8936814a7ded5bb327951f00a3319a66ecda94b64736f6c63430008010033";

  public static final String FUNC_APPROVE = "approve";

  public static final String FUNC_BALANCEOF = "balanceOf";

  public static final String FUNC_BURN = "burn";

  public static final String FUNC_GETAPPROVED = "getApproved";

  public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

  public static final String FUNC_MINTNFT = "mintNFT";

  public static final String FUNC_NAME = "name";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_OWNEROF = "ownerOf";

  public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

  public static final String FUNC_safeTransferFrom = "safeTransferFrom";

  public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

  public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

  public static final String FUNC_SYMBOL = "symbol";

  public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

  public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

  public static final String FUNC_TOKENURI = "tokenURI";

  public static final String FUNC_TOTALSUPPLY = "totalSupply";

  public static final String FUNC_TRANSFERFROM = "transferFrom";

  public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

  public static final Event APPROVAL_EVENT = new Event("Approval",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
      }, new TypeReference<Address>(true) {
      }, new TypeReference<Uint256>(true) {
      }));;

  public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
      }, new TypeReference<Address>(true) {
      }, new TypeReference<Bool>() {
      }));;

  public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
      }, new TypeReference<Address>(true) {
      }));;

  public static final Event TRANSFER_EVENT = new Event("Transfer",
      Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
      }, new TypeReference<Address>(true) {
      }, new TypeReference<Uint256>(true) {
      }));;

  protected static final HashMap<String, String> _addresses;

  static {
    _addresses = new HashMap<String, String>();
  }

  @Deprecated
  protected OSNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  protected OSNFT(String contractAddress, Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  @Deprecated
  protected OSNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  protected OSNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
    ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ApprovalEventResponse typedResponse = new ApprovalEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
      @Override
      public ApprovalEventResponse apply(Log log) {
        Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
      }
    });
  }

  public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
      DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
    return approvalEventFlowable(filter);
  }

  public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT,
        transactionReceipt);
    ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
      @Override
      public ApprovalForAllEventResponse apply(Log log) {
        Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
      }
    });
  }

  public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock,
      DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
    return approvalForAllEventFlowable(filter);
  }

  public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT,
        transactionReceipt);
    ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(
        valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
      @Override
      public OwnershipTransferredEventResponse apply(Log log) {
        Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
      }
    });
  }

  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock,
      DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
    return ownershipTransferredEventFlowable(filter);
  }

  public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
    ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      TransferEventResponse typedResponse = new TransferEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
    return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
      @Override
      public TransferEventResponse apply(Log log) {
        Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
      }
    });
  }

  public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
      DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
    return transferEventFlowable(filter);
  }

  public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_APPROVE, Arrays
        .<Type>asList(new org.web3j.abi.datatypes.Address(to), new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BURN,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), new org.web3j.abi.datatypes.Address(operator)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<TransactionReceipt> mintNFT(String recipient, String tokenUri) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTNFT, Arrays
        .<Type>asList(new org.web3j.abi.datatypes.Address(recipient), new org.web3j.abi.datatypes.Utf8String(tokenUri)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<String> name() {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME,
        Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<String> owner() {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
        Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RENOUNCEOWNERSHIP,
        Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
        FUNC_safeTransferFrom, Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
            new org.web3j.abi.datatypes.Address(to), new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId,
      byte[] _data) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_safeTransferFrom,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), new org.web3j.abi.datatypes.Address(to),
            new org.web3j.abi.datatypes.generated.Uint256(tokenId), new org.web3j.abi.datatypes.DynamicBytes(_data)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SETAPPROVALFORALL,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), new org.web3j.abi.datatypes.Bool(approved)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<String> symbol() {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL,
        Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner),
            new org.web3j.abi.datatypes.generated.Uint256(index)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
        }));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<BigInteger> totalSupply() {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY,
        Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
        FUNC_TRANSFERFROM, Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from),
            new org.web3j.abi.datatypes.Address(to), new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
        Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
    final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSFEROWNERSHIP,
        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  @Deprecated
  public static OSNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
      BigInteger gasLimit) {
    return new OSNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  @Deprecated
  public static OSNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
      BigInteger gasPrice, BigInteger gasLimit) {
    return new OSNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  public static OSNFT load(String contractAddress, Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider) {
    return new OSNFT(contractAddress, web3j, credentials, contractGasProvider);
  }

  public static OSNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    return new OSNFT(contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public static RemoteCall<OSNFT> deploy(Web3j web3j, Credentials credentials,
      ContractGasProvider contractGasProvider) {
    return deployRemoteCall(OSNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
  }

  public static RemoteCall<OSNFT> deploy(Web3j web3j, TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    return deployRemoteCall(OSNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
  }

  @Deprecated
  public static RemoteCall<OSNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
      BigInteger gasLimit) {
    return deployRemoteCall(OSNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
  }

  @Deprecated
  public static RemoteCall<OSNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
      BigInteger gasLimit) {
    return deployRemoteCall(OSNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
  }

  protected String getStaticDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }

  public static String getPreviouslyDeployedAddress(String networkId) {
    return _addresses.get(networkId);
  }

  public static class ApprovalEventResponse extends BaseEventResponse {
    public String owner;

    public String approved;

    public BigInteger tokenId;
  }

  public static class ApprovalForAllEventResponse extends BaseEventResponse {
    public String owner;

    public String operator;

    public Boolean approved;
  }

  public static class OwnershipTransferredEventResponse extends BaseEventResponse {
    public String previousOwner;

    public String newOwner;
  }

  public static class TransferEventResponse extends BaseEventResponse {
    public String from;

    public String to;

    public BigInteger tokenId;
  }
}
